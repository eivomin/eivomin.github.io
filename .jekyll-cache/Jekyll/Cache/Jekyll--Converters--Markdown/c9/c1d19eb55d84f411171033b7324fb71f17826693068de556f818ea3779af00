I"¸<h2 id="1406---ÏóêÎîîÌÑ∞">1406.   ÏóêÎîîÌÑ∞</h2>

<hr />

<h3 id="code">Code</h3>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">package</span> <span class="nn">baekjoon</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.io.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.*</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ÏóêÎîîÌÑ∞_1406</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="nc">IOException</span> <span class="o">{</span>
        <span class="nc">BufferedReader</span> <span class="n">br</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">BufferedReader</span><span class="o">(</span><span class="k">new</span> <span class="nc">InputStreamReader</span><span class="o">(</span><span class="nc">System</span><span class="o">.</span><span class="na">in</span><span class="o">));</span>
        <span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">();</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">lstack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>
        <span class="nc">Stack</span><span class="o">&lt;</span><span class="nc">String</span><span class="o">&gt;</span> <span class="n">rstack</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Stack</span><span class="o">&lt;&gt;();</span>

        <span class="kt">int</span> <span class="n">len</span> <span class="o">=</span> <span class="n">str</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">len</span><span class="o">;</span> <span class="n">i</span><span class="o">++)</span>
            <span class="n">lstack</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">str</span><span class="o">.</span><span class="na">charAt</span><span class="o">(</span><span class="n">i</span><span class="o">)+</span><span class="s">""</span><span class="o">);</span>

        <span class="kt">int</span> <span class="no">M</span> <span class="o">=</span> <span class="nc">Integer</span><span class="o">.</span><span class="na">parseInt</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">());</span>

        <span class="k">for</span><span class="o">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="o">;</span> <span class="n">i</span><span class="o">&lt;</span><span class="no">M</span><span class="o">;</span> <span class="n">i</span><span class="o">++){</span>
            <span class="nc">StringTokenizer</span> <span class="n">st</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringTokenizer</span><span class="o">(</span><span class="n">br</span><span class="o">.</span><span class="na">readLine</span><span class="o">(),</span> <span class="s">" "</span><span class="o">);</span>
            <span class="nc">String</span> <span class="n">cmd</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
            <span class="c1">// Î™ÖÎ†πÏñ¥Í∞Ä LÏùº Í≤ΩÏö∞</span>
            <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"L"</span><span class="o">))</span> <span class="o">{</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">lstack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                    <span class="n">rstack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">lstack</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"D"</span><span class="o">)){</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">rstack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                    <span class="n">lstack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">rstack</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>
                <span class="o">}</span>
            <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">cmd</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="s">"B"</span><span class="o">)){</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">lstack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">()){</span>
                    <span class="n">lstack</span><span class="o">.</span><span class="na">pop</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
                <span class="nc">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">st</span><span class="o">.</span><span class="na">nextToken</span><span class="o">();</span>
                <span class="n">lstack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="k">while</span><span class="o">(!</span><span class="n">lstack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
            <span class="n">rstack</span><span class="o">.</span><span class="na">push</span><span class="o">(</span><span class="n">lstack</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>

        <span class="nc">StringBuilder</span> <span class="n">sb</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">StringBuilder</span><span class="o">();</span>
        <span class="k">while</span><span class="o">(!</span><span class="n">rstack</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">())</span>
            <span class="n">sb</span><span class="o">.</span><span class="na">append</span><span class="o">(</span><span class="n">rstack</span><span class="o">.</span><span class="na">pop</span><span class="o">());</span>

        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">sb</span><span class="o">.</span><span class="na">toString</span><span class="o">());</span>
        <span class="n">br</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>


</code></pre></div></div>
:ET