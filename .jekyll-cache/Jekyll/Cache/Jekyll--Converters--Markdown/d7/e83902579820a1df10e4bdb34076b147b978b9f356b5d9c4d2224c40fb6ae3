I"4<h2 id="iterator와-listiterator의-차이">Iterator와 ListIterator의 차이</h2>

<hr />

<p>ListIterator</p>
<ul>
  <li>ArrayList나 LinkedList와 같이 List인터페이스를 구현한 컬렉션에서만 사용</li>
  <li>
    <p>Iterator는 단방향으로만 이동할 수 있는 데 반해 ListIterator는 양방향으로의 이동이 가능</p>
  </li>
  <li>list.listIterator(list.size());
    <ul>
      <li>list.size()위치에서부터 시작</li>
    </ul>
  </li>
  <li>boolean hasNext()
    <ul>
      <li>Iterator를 앞방향으로 진행하며 객체를 확인</li>
      <li>iteration이 객체(elements)를 더 갖고 있으면 true 그외 false</li>
    </ul>
  </li>
  <li>boolean hasPrevious()
    <ul>
      <li>Iterator가 반대방향으로 진행하며 객체를 확인</li>
      <li>iteration이 객체(elements)를 더 갖고 있으면 true 그외 false</li>
    </ul>
  </li>
  <li>Object next()
    <ul>
      <li>iteration에서 다음 객체를 리턴</li>
    </ul>
  </li>
  <li>Object previous()
    <ul>
      <li>iteration에서 이전 객체를 리턴</li>
    </ul>
  </li>
  <li>void remove()
    <ul>
      <li>next() 또는 previous()로 리턴된 마지막 객체를 제거</li>
    </ul>
  </li>
  <li>void set(Object o)
    <ul>
      <li>next() 또는 previous()로 리턴된 마지막 객체와 o를 바꿉니다.</li>
    </ul>
  </li>
  <li>int nextIndex()
    <ul>
      <li>next() 호출로 리턴될 객체의 인덱스</li>
    </ul>
  </li>
  <li>int previousIndex()
    <ul>
      <li>previous()호출로 리턴될 객체의 인덱스</li>
    </ul>
  </li>
  <li>void add(Object o)
    <ul>
      <li>list에 객체 o를 추가합니다.</li>
    </ul>
  </li>
</ul>

<p>출처: https://velog.io/@yuiopre98/%EB%B0%B1%EC%A4%80-1406%EB%B2%88-%EC%97%90%EB%94%94%ED%84%B0ListIterator</p>
:ET